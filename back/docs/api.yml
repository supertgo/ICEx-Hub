openapi: 3.0.0
paths:
  /classroom:
    get:
      operationId: ClassroomController_search
      parameters:
        - name: page
          required: false
          in: query
          description: The page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: The number of items per page
          schema:
            type: number
        - name: sort
          required: false
          in: query
          description: The field that should be used for sorting
          schema:
            nullable: true
            enum:
              - name
              - createdAt
            type: string
        - name: sortDir
          required: false
          in: query
          description: The sort direction
          schema:
            nullable: true
            enum:
              - asc
              - desc
            type: string
        - name: filter
          required: false
          in: query
          description: The filter to apply to the search
          schema:
            nullable: true
            enum:
              - name
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      totalItems:
                        type: string
                      itemCount:
                        type: number
                      itemsPerPage:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ClassroomPresenter'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
      tags:
        - classroom
      security:
        - bearer: []
  /classroom/{id}:
    get:
      operationId: ClassroomController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassroomPresenter'
        '401':
          description: Unauthorized
        '404':
          description: Classroom not found
      tags:
        - classroom
      security:
        - bearer: []
    put:
      operationId: ClassroomController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClassroomDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassroomPresenter'
        '401':
          description: Unauthorized
        '404':
          description: Classroom not found
        '422':
          description: Unprocessable Entity
      tags:
        - classroom
      security:
        - bearer: []
    delete:
      operationId: ClassroomController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Classroom deleted
        '401':
          description: Unauthorized
        '404':
          description: Classroom not found
      tags:
        - classroom
      security:
        - bearer: []
  /course:
    get:
      operationId: CourseController_search
      parameters:
        - name: page
          required: false
          in: query
          description: The page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: The number of items per page
          schema:
            type: number
        - name: sort
          required: false
          in: query
          description: The field that should be used for sorting, createdAt is the default
          schema:
            nullable: true
            enum:
              - name
              - createdAt
              - code
            type: string
        - name: sortDir
          required: false
          in: query
          description: The sort direction
          schema:
            nullable: true
            enum:
              - asc
              - desc
            type: string
        - name: filter
          required: false
          in: query
          description: The filter to apply to the search, either name or code
          schema:
            nullable: true
            enum:
              - name
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      totalItems:
                        type: number
                      itemCount:
                        type: number
                      itemsPerPage:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CoursePresenter'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
      tags:
        - course
  /course/{id}:
    get:
      operationId: CourseController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoursePresenter'
        '401':
          description: Unauthorized
        '404':
          description: Course not found
      tags:
        - course
    put:
      operationId: CourseController_create
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoursePresenter'
        '401':
          description: Unauthorized
        '404':
          description: Course not found
        '422':
          description: Unprocessable Entity
      tags:
        - course
      security:
        - bearer: []
    delete:
      operationId: CourseController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Course deleted
        '401':
          description: Unauthorized
        '404':
          description: Course not found
      tags:
        - course
  /schedule:
    get:
      operationId: ScheduleController_search
      parameters:
        - name: page
          required: false
          in: query
          description: The page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: The number of items per page
          schema:
            type: number
        - name: sort
          required: false
          in: query
          description: The field that should be used for sorting
          schema:
            nullable: true
            enum:
              - createdAt
            type: string
        - name: sortDir
          required: false
          in: query
          description: The sort direction
          schema:
            nullable: true
            enum:
              - asc
              - desc
            type: string
        - name: filter
          required: false
          in: query
          description: The filter to apply to the search
          schema:
            nullable: true
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      totalItems:
                        type: number
                      itemCount:
                        type: number
                      itemsPerPage:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SchedulePresenter'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
      tags:
        - schedule
  /schedule/{id}:
    get:
      operationId: ScheduleController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchedulePresenter'
        '401':
          description: Unauthorized
        '404':
          description: Schedule not found
      tags:
        - schedule
      security:
        - bearer: []
    put:
      operationId: ScheduleController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScheduleDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchedulePresenter'
        '401':
          description: Unauthorized
        '404':
          description: Schedule not found
        '422':
          description: Unprocessable Entity
      tags:
        - schedule
      security:
        - bearer: []
    delete:
      operationId: ScheduleController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Schedule deleted
        '401':
          description: Unauthorized
        '404':
          description: Schedule not found
      tags:
        - schedule
      security:
        - bearer: []
  /user:
    post:
      operationId: UserController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPresenter'
        '409':
          description: Email already in use
        '422':
          description: Unprocessable Entity
      tags:
        - user
    get:
      operationId: UserController_search
      parameters:
        - name: page
          required: false
          in: query
          description: The page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: The number of items per page
          schema:
            type: number
        - name: sort
          required: false
          in: query
          description: The field that should be used for sorting
          schema:
            nullable: true
            enum:
              - name
              - createdAt
            type: string
        - name: sortDir
          required: false
          in: query
          description: The sort direction
          schema:
            nullable: true
            enum:
              - asc
              - desc
            type: string
        - name: filter
          required: false
          in: query
          description: The filter to apply to the search
          schema:
            nullable: true
            enum:
              - name
              - email
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      totalItems:
                        type: number
                      itemCount:
                        type: number
                      itemsPerPage:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserPresenter'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
      tags:
        - user
      security:
        - bearer: []
  /user/login:
    post:
      operationId: UserController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogInUserPresenter'
        '422':
          description: Unprocessable Entity
      tags:
        - user
  /user/{id}:
    get:
      operationId: UserController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPresenter'
        '401':
          description: Unauthorized
        '404':
          description: User not found
      tags:
        - user
      security:
        - bearer: []
    put:
      operationId: UserController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPresenter'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '422':
          description: Unprocessable Entity
      tags:
        - user
      security:
        - bearer: []
    delete:
      operationId: UserController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: User deleted
        '401':
          description: Unauthorized
        '404':
          description: User not found
      tags:
        - user
      security:
        - bearer: []
  /user/{id}/password:
    patch:
      operationId: UserController_updatePassword
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPresenter'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '422':
          description: Unprocessable Entity
      tags:
        - user
      security:
        - bearer: []
info:
  title: Nest Auth Api
  description: The Nest Api support creating deleting editing and authenticating users
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: Bearer
      bearerFormat: JWT
      name: Authorization
      description: JWT token
      in: Header
      type: http
  schemas:
    ClassroomPresenter:
      type: object
      properties:
        id:
          type: string
          description: The id of classroom
        name:
          type: string
          description: The name of the classroom
        building:
          type: string
          description: The building (ICEX or CAD3) of classroom
        createdAt:
          format: date-time
          type: string
          description: The date when the classroom was created
      required:
        - id
        - name
        - building
        - createdAt
    UpdateClassroomDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the classroom
        building:
          type: object
          description: The building of the classroom
      required:
        - name
        - building
    CoursePresenter:
      type: object
      properties:
        id:
          type: string
          description: The id of course
        name:
          type: string
          description: The name of the course
        code:
          type: string
          description: The code of the course
        createdAt:
          format: date-time
          type: string
          description: The date when the course was created
        updatedAt:
          format: date-time
          type: string
          description: The date when the course was updated
      required:
        - id
        - name
        - code
        - createdAt
        - updatedAt
    CreateCourseDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the course
        code:
          type: string
          description: The code of the course
      required:
        - name
        - code
    SchedulePresenter:
      type: object
      properties:
        id:
          type: string
          description: The id of schedule
        discipline:
          type: object
          description: The discipline of schedule
        classroom:
          description: The classroom of schedule
          allOf:
            - $ref: '#/components/schemas/ClassroomPresenter'
        dayPattern:
          type: string
          description: The days that the schedule will happen
        timeSlot:
          type: string
          description: The time that the schedule will happen
        createdAt:
          format: date-time
          type: string
          description: The date when the schedule was created
        updatedAt:
          format: date-time
          type: string
          description: The date when the schedule was updated
      required:
        - id
        - dayPattern
        - timeSlot
        - createdAt
        - updatedAt
    UpdateScheduleDto:
      type: object
      properties:
        classroomId:
          type: string
          description: The new classroomId of the schedule
        disciplineId:
          type: string
          description: The new disciplineId of the schedule
    SignUpDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email of the user
        password:
          type: string
          description: The password of the user
      required:
        - name
        - email
        - password
    UserPresenter:
      type: object
      properties:
        id:
          type: string
          description: The id of the user
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email of the user
        createdAt:
          format: date-time
          type: string
          description: The date when the user was created
      required:
        - id
        - name
        - email
        - createdAt
    SignInDto:
      type: object
      properties:
        email:
          type: string
          description: The email of the user
        password:
          type: string
          description: The password of the user
      required:
        - email
        - password
    LogInUserPresenter:
      type: object
      properties:
        id:
          type: string
          description: The id of the user
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email of the user
        createdAt:
          format: date-time
          type: string
          description: The date when the user was created
        token:
          type: string
          description: The token of the user
      required:
        - id
        - name
        - email
        - createdAt
        - token
    UpdateUserDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the user
      required:
        - name
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: The old password of the user
        newPassword:
          type: string
          description: The new password of the user
      required:
        - oldPassword
        - newPassword
