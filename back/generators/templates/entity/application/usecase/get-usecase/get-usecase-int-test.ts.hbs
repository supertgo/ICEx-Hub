import { PrismaClient } from '@prisma/client';
import { {{pascalCase name}}PrismaRepository } from '@/{{dashCase name}}/infrastructure/database/prisma/repositories/{{dashCase name}}-prisma.repository';
import { Test, TestingModule } from '@nestjs/testing';
import { setUpPrismaTest } from '@/shared/infrastructure/database/prisma/testing/set-up-prisma-test';
import { DatabaseModule } from '@/shared/infrastructure/database/database.module';
import { Get{{pascalCase name}}Usecase } from '@/{{dashCase name}}/application/usecases/get-{{dashCase name}}.usecase';
import { faker } from '@faker-js/faker';

describe('Get {{dashCase name}} usecase integration tests', () => {
  const prismaService = new PrismaClient();
  let repository: {{pascalCase name}}PrismaRepository;
  let sut: Get{{pascalCase name}}Usecase.UseCase;
  let module: TestingModule;

  beforeAll(async () => {
    setUpPrismaTest();

    module = await Test.createTestingModule({
      imports: [DatabaseModule.forTest(prismaService)],
    }).compile();

    repository = new {{pascalCase name}}PrismaRepository(prismaService as any);
  });

  beforeEach(async () => {
    sut = new Get{{pascalCase name}}Usecase.UseCase(repository);
    await prismaService.{{dashCase name}}.deleteMany();
  });

  afterAll(async () => {
    await prismaService.$disconnect();
    await module.close();
  });

  it('should throw error when {{lowerCase name}} not found', () => {
    const id = faker.string.uuid();
    expect(() => sut.execute({ id })).rejects.toThrowError(
      new {{pascalCase name}}WithIdNotFoundError(id),
    );
  });

  it('should retrieve a {{lowerCase name}}', async () => {
    const {{snakeCase name}} = await prismaService.{{dashCase name}}.create({ data: {{pascalCase name}}DataBuilder({}) });

    const output = await sut.execute({ id: {{snakeCase name}}.id });

    expect(output).toBeDefined();
    expect(output).toMatchObject({{snakeCase name}});
  });
});
