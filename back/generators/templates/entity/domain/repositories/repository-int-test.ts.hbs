import { setUpPrismaTest } from '@/shared/infrastructure/database/prisma/testing/set-up-prisma-test';
import { {{pascalCase name}}DataBuilder } from '@/{{dashCase name}}/domain/testing/helper/{{dashCase name}}-data-builder';
import { PrismaClient } from '@prisma/client';
import { {{pascalCase name}}PrismaRepository } from '@/{{dashCase name}}/infrastructure/database/prisma/repositories/{{dashCase name}}-prisma.repository';
import { Test, TestingModule } from '@nestjs/testing';
import { DatabaseModule } from '@/shared/infrastructure/database/database.module';
import { {{pascalCase name}}Entity } from '@/{{dashCase name}}/domain/entities/{{dashCase name}}.entity';
import { faker } from '@faker-js/faker';
import { {{pascalCase name}}Repository } from '@/{{dashCase name}}/domain/repositories/{{dashCase name}}.repository';
import { SortOrderEnum } from '@/shared/domain/repositories/searchable-repository-contracts';
import { {{pascalCase name}}WithIdNotFoundError } from '@/{{dashCase name}}/infrastructure/errors/{{dashCase name}}-with-id-not-found-error';

describe('{{pascalCase name}} prisma repository integration tests', () => {
  const prismaService = new PrismaClient();
  let sut: {{pascalCase name}}PrismaRepository;
  let module: TestingModule;

  beforeAll(async () => {
    setUpPrismaTest();

    module = await Test.createTestingModule({
      imports: [DatabaseModule.forTest(prismaService)],
    }).compile();
  });

  beforeEach(async () => {
    sut = new {{pascalCase name}}PrismaRepository(prismaService as any);
    await prismaService.{{dashCase name}}.deleteMany();
  });

  afterAll(async () => {
    await prismaService.$disconnect();
    await module.close();
  });

  it('should throw error when entity does not exist', () => {
    expect(() => sut.findById('1')).rejects.toThrowError(
      new {{pascalCase name}}WithIdNotFoundError('1'),
    );
  });

  it('should find {{dashCase name}} by id', async () => {
    const entity = new {{pascalCase name}}Entity({{pascalCase name}}DataBuilder({}));

    const created{{pascalCase name}} = await prismaService.{{dashCase name}}.create({
      data: entity.toJSON(),
    });

    const {{dashCase name}} = await sut.findById(created{{pascalCase name}}.id);

    expect(sut).not.toBeNull();
    expect({{dashCase name}}.toJSON()).toStrictEqual(entity.toJSON());
  });

  it('should insert a new {{dashCase name}}', async () => {
    const entity = new {{pascalCase name}}Entity({{pascalCase name}}DataBuilder({}));
    await sut.insert(entity);

  });

  it('should return one {{dashCase name}} if theres only one with find all', async () => {
    const entity = new {{pascalCase name}}Entity({{pascalCase name}}DataBuilder({}));
    await sut.insert(entity);

    const {{dashCase name}}s = await sut.findAll();

    expect({{dashCase name}}s).toHaveLength(1);
    expect({{dashCase name}}s[0].toJSON()).toStrictEqual(entity.toJSON());
  });

  it('should throw error when trying to update non-existent {{lowerCase name}}', async () => {
    const nonExistentId = faker.string.uuid();
    const entity = new {{pascalCase name}}Entity({{pascalCase name}}DataBuilder({}), nonExistentId);

    await expect(sut.update(entity)).rejects.toThrowError(
      new {{pascalCase name}}WithIdNotFoundError(nonExistentId),
    );
  });

  it('should update a {{lowerCase name}} successfully', async () => { });

  it('should throw error when trying to delete non-existent {{lowerCase name}}', async () => {
    const nonExistentId = faker.string.uuid();

    await expect(sut.delete(nonExistentId)).rejects.toThrowError(
      new {{pascalCase name}}WithIdNotFoundError(nonExistentId),
    );
  });

  it('should delete a {{lowerCase name}} successfully', async () => {
    const entity = new {{pascalCase name}}Entity({{pascalCase name}}DataBuilder({ name: 'John' }));
    await sut.insert(entity);

    await sut.delete(entity.id);

    const {{dashCase name}}Count = await prismaService.{{dashCase name}}.count({
      where: { id: entity.id },
    });

    expect({{dashCase name}}Count).toBe(0);
  });


  describe('search tests', () => {
    it.todo('should return with default values', async () => { });

    it.todo('should paginate {{dashCase name}}s', async () => { });
  });
});
