import { PrismaService } from '@/shared/infrastructure/database/prisma/prisma.service';
import { {{pascalCase name}} } from '@prisma/client';
import { {{pascalCase name}}ModelMapper } from '@/{{dashCase name}}/infrastructure/database/prisma/models/{{dashCase name}}-model.mapper';
import { ValidationErrors } from '@/shared/domain/errors/validation-errors';
import { {{pascalCase name}}Entity } from '@/{{dashCase name}}/domain/entities/{{dashCase name}}.entity';
import { {{pascalCase name}}DataBuilder } from '@/{{dashCase name}}/domain/testing/helper/{{dashCase name}}-data-builder';
import { setUpPrismaTest } from '@/shared/infrastructure/database/prisma/testing/set-up-prisma-test';

describe('{{pascalCase name}} model mapper integration tests', () => {
  let prismaService: PrismaService;
  let props: any;

  beforeAll(async () => {
    setUpPrismaTest();
    
    prismaService = new PrismaService();
    props = {{pascalCase name}}DataBuilder({});
    await prismaService.$connect();
  });

  beforeEach(() => {
    prismaService.{{dashCase name}}.deleteMany();
  });

  afterAll(async () => {
    await prismaService.$disconnect();
  });

  it('should throw error when {{dashCase name}} model is invalid', () => {
    const model: {{pascalCase name}} = Object.assign({}, props, { name: null });

    expect(() => {{pascalCase name}}ModelMapper.toEntity(model)).toThrowError(
      new ValidationErrors('Could not load {{dashCase name}} having id undefined'),
    );
  });

  it('should map {{lowerCase name}} model to entity', async () => {
    const model: {{pascalCase name}} = await prismaService.{{dashCase name}}.create({
      data: props,
    });

    const sut = {{pascalCase name}}ModelMapper.toEntity(model);

    expect(sut).toBeInstanceOf({{pascalCase name}}Entity);

  });
});
